services:
  postgres-prod:
    image: postgres:16
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backups:/backups
      - ./restore_db.sh:/docker-entrypoint-initdb.d/restore_db.sh
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      BACKUP_FILE: /backups/news-bot-database-10-10-2024.sql
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network-prod
    command: >
      bash -c "
        chmod +x /docker-entrypoint-initdb.d/restore_db.sh &&
        docker-entrypoint.sh postgres
      "
    
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5051:80"
    networks:
      - app-network-prod
    depends_on:
      - postgres-prod

  app-prod:
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5001:5000"
    depends_on:
      postgres-prod:
        condition: service_healthy
    environment:
      - DB_URI=postgresql://${DB_USER}:${DB_PASSWORD}@postgres-prod:5432/${DB_NAME}
      - REDIS_HOST=host.docker.internal
      - REDIS_PORT=6379
      - REDIS_DB=1
      - FLASK_ENV=production
    volumes:
      - .:/app
    command: 
      - /bin/sh
      - -c
      - |
        chmod +x /app/script.sh
        ./script.sh
    networks:
      - app-network-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://app-prod:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 180s
    restart: unless-stopped

  playwright:
    build:
      context: .
      dockerfile: Dockerfile.playwright
    volumes:
      - .:/home/pwuser/app
    depends_on:
      - app-prod
    environment:
      - DISPLAY=:99
    cap_add:
      - SYS_ADMIN
    networks:
      - app-network-prod

  ngrok:
    image: ngrok/ngrok:latest
    command:
      - "http"
      - "--domain=${NGROK_DOMAIN}"
      - "app-prod:5000"
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    ports:
      - "4041:4040"
    depends_on:
      - app-prod
    networks:
      - app-network-prod


volumes:
  postgres_data_prod:
  pgadmin_data:

networks:
  app-network-prod:
    name: app-network-prod
