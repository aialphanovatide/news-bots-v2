# """grok prompt column added to bot table

# Revision ID: 82795e675cf1
# Revises: 0692c0dbb1bd
# Create Date: 2024-08-01 11:43:39.538232

# """
# from alembic import op
# import sqlalchemy as sa


# # revision identifiers, used by Alembic.
# revision = '82795e675cf1'
# down_revision = '0692c0dbb1bd'
# branch_labels = None
# depends_on = None


# def upgrade():
#     # ### commands auto generated by Alembic - please adjust! ###
#     with op.batch_alter_table('bot', schema=None) as batch_op:
#         batch_op.add_column(sa.Column('grok_prompt', sa.String(), nullable=True))

#     # ### end Alembic commands ###


# def downgrade():
#     # ### commands auto generated by Alembic - please adjust! ###
#     with op.batch_alter_table('bot', schema=None) as batch_op:
#         batch_op.drop_column('grok_prompt')

#     # ### end Alembic commands ###


"""grok prompt column added to bot table

Revision ID: 82795e675cf1
Revises: 0692c0dbb1bd
Create Date: 2024-08-01 11:43:39.538232

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine.reflection import Inspector

# revision identifiers, used by Alembic.
revision = '82795e675cf1'
down_revision = '0692c0dbb1bd'
branch_labels = None
depends_on = None

def column_exists(table, column):
    bind = op.get_bind()
    inspector = Inspector.from_engine(bind)
    columns = inspector.get_columns(table)
    return any(c["name"] == column for c in columns)

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('bot', schema=None) as batch_op:
        if not column_exists('bot', 'grok_prompt'):
            batch_op.add_column(sa.Column('grok_prompt', sa.String(), nullable=True))

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('bot', schema=None) as batch_op:
        if column_exists('bot', 'grok_prompt'):
            batch_op.drop_column('grok_prompt')

