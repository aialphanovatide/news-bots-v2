name: Deploy to Development

on:
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    env:
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME_DEV: ${{ secrets.DB_NAME_DEV }}
      PGADMIN_DEFAULT_EMAIL: ${{ secrets.PGADMIN_DEFAULT_EMAIL }}
      PGADMIN_DEFAULT_PASSWORD: ${{ secrets.PGADMIN_DEFAULT_PASSWORD }}
      NGROK_AUTHTOKEN_DEV: ${{ secrets.NGROK_AUTHTOKEN_DEV }}
      NGROK_DOMAIN_DEV: ${{ vars.NGROK_DOMAIN_DEV }}
      NEWS_BOT_OPENAI_API_KEY: ${{ secrets.NEWS_BOT_OPENAI_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      AWS_ACCESS: ${{ secrets.AWS_ACCESS }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
      COINMARKET_API_KEY: ${{ secrets.COINMARKET_API_KEY }}
      FLASK_ENV: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Deploy to Development
      run: |
        echo "Starting deployment to Development environment..."
        # Ensure we're in the correct directory
        cd $GITHUB_WORKSPACE || exit 1
        
        echo "Fetching the latest changes..."
        git fetch origin
        
        echo "Checking out the develop branch..."
        git checkout develop
        
        echo "Pulling the latest changes from the develop branch..."
        PREVIOUS_COMMIT=$(git rev-parse HEAD)
        git pull origin develop
        
        # Function to start containers
        start_containers() {
          docker-compose -f docker-compose-dev.yml -p news-bot-dev up -d --build
          return $?
        }
        
        # Function to stop containers
        stop_containers() {
          docker-compose -f docker-compose-dev.yml -p news-bot-dev down
        }
        
        # Function to perform health check
        health_check() {
          for i in {1..5}; do
            if curl -f http://localhost:5000/health; then
              return 0
            fi
            echo "Health check attempt $i failed. Retrying in 10 seconds..."
            sleep 10
          done
          return 1
        }
        
        # Function to rollback
        rollback() {
          echo "Rolling back to previous commit..."
          git reset --hard $PREVIOUS_COMMIT
          stop_containers
          start_containers
          if health_check; then
            echo "Rollback successful"
          else
            echo "Rollback failed. Manual intervention required."
            exit 1
          fi
        }
        
        # Main deployment logic
        echo "Stopping containers..."
        stop_containers
        echo "Starting containers..."
        if start_containers; then
          echo "Waiting for services to start..."
          sleep 150
          echo "Performing health check..."
          if health_check; then
            echo "Deployment successful. Health check passed."
          else
            echo "Health check failed. Rolling back..."
            rollback
          fi
        else
          echo "Failed to start containers. Rolling back..."
          rollback
        fi

    - name: Deployment Status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "Deployment to Development completed successfully!"
        else
          echo "Deployment to Development failed. Please check the logs for details."
        fi

    - name: Debug Information
      if: failure()
      run: |
        echo "Current directory: $(pwd)"
        echo "Contents of directory:"
        ls -la
        echo "Git status:"
        git status
        echo "Docker version:"
        docker --version
        echo "Docker Compose version:"
        docker-compose --version