# name: Deploy to Production

# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:

# jobs:
#   deploy:
#     runs-on: self-hosted
#     env:
#       DB_USER: ${{ secrets.DB_USER }}
#       DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
#       DB_NAME: ${{ secrets.DB_NAME }}
#       PGADMIN_DEFAULT_EMAIL: ${{ secrets.PGADMIN_DEFAULT_EMAIL }}
#       PGADMIN_DEFAULT_PASSWORD: ${{ secrets.PGADMIN_DEFAULT_PASSWORD }}
#       NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
#       NGROK_DOMAIN: ${{ vars.NGROK_DOMAIN }}
#       NEWS_BOT_OPENAI_API_KEY: ${{ secrets.NEWS_BOT_OPENAI_API_KEY }}
#       OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
#       AWS_ACCESS: ${{ secrets.AWS_ACCESS }}
#       AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
#       SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
#       PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
#       COINMARKET_API_KEY: ${{ secrets.COINMARKET_API_KEY }}
#       FLASK_ENV: production

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
#       with:
#         fetch-depth: 0

#     - name: Deploy to Production
#       run: |
#         echo "Starting deployment to Production environment..."
#         cd $GITHUB_WORKSPACE || exit 1
        
#         echo "Fetching the latest changes..."
#         git fetch origin
        
#         echo "Checking out the main branch..."
#         git checkout main
        
#         echo "Pulling the latest changes from the main branch..."
#         git pull origin main
        
#         # Determine current active deployment
#         ACTIVE_DEPLOYMENT=$(docker-compose -f docker-compose.yml -p news-bot-prod ps | grep -E "app-(blue|green)" | grep "Up" | awk '{print $1}')
#         if [[ -z "$ACTIVE_DEPLOYMENT" ]]; then
#           echo "No active deployment found. Starting initial deployment..."
#           NEW_DEPLOYMENT="app-blue"
#           OLD_DEPLOYMENT="app-green"
#         elif [[ $ACTIVE_DEPLOYMENT == *"blue"* ]]; then
#           NEW_DEPLOYMENT="app-green"
#           OLD_DEPLOYMENT="app-blue"
#         else
#           NEW_DEPLOYMENT="app-blue"
#           OLD_DEPLOYMENT="app-green"
#         fi
        
#         echo "Current active deployment: $ACTIVE_DEPLOYMENT"
#         echo "New deployment: $NEW_DEPLOYMENT"
        
#         # Function to start essential services and new deployment
#         start_services() {
#           echo "Starting essential services and new deployment: $NEW_DEPLOYMENT"
#           docker-compose -f docker-compose.yml -p news-bot-prod up -d --build postgres-prod pgadmin nginx playwright ngrok $NEW_DEPLOYMENT
#           return $?
#         }

#         # Function to wait for essential services
#         wait_for_services() {
#           echo "Waiting for essential services to be ready..."
#           while ! docker-compose -f docker-compose.yml -p news-bot-prod exec -T postgres-prod pg_isready -U ${DB_USER} -d ${DB_NAME}; do
#             echo "Waiting for postgres-prod to be ready..."
#             sleep 5
#           done
#           while ! curl -s http://localhost:80 > /dev/null; do
#             echo "Waiting for nginx to be ready..."
#             sleep 5
#           done
#           echo "Essential services are ready."
#         }
        
#         # Function to perform health check
#         health_check() {
#           CONTAINER_IDS=$(docker-compose -f docker-compose.yml -p news-bot-prod ps -q $NEW_DEPLOYMENT)
#           for CONTAINER_ID in $CONTAINER_IDS; do
#             PORT=$(docker port $CONTAINER_ID 5000/tcp | cut -d: -f2)
#             for i in {1..5}; do
#               if curl -f http://localhost:$PORT/health; then
#                 return 0
#               fi
#               echo "Health check attempt $i failed for container $CONTAINER_ID. Retrying in 30 seconds..."
#               sleep 30
#             done
#           done
#           return 1
#         }
        
#         # Function to switch traffic
#         switch_traffic() {
#           echo "Switching traffic to $NEW_DEPLOYMENT"
#           CONTAINER_IDS=$(docker-compose -f docker-compose.yml -p news-bot-prod ps -q $NEW_DEPLOYMENT)
#           NEW_UPSTREAM=""
#           for CONTAINER_ID in $CONTAINER_IDS; do
#             PORT=$(docker port $CONTAINER_ID 5000/tcp | cut -d: -f2)
#             NEW_UPSTREAM="${NEW_UPSTREAM}server localhost:$PORT;"
#           done

#           # Update the nginx configuration
#           awk -v new_upstream="$NEW_UPSTREAM" '
#             /upstream app_servers {/,/}/ {
#               if ($0 ~ /upstream app_servers {/) {
#                 print $0
#                 print "    " new_upstream
#                 in_upstream = 1
#                 next
#               }
#               if (in_upstream && $0 ~ /}/) {
#                 in_upstream = 0
#                 print $0
#                 next
#               }
#               if (!in_upstream) {
#                 print $0
#               }
#             }
#           ' nginx/app.conf > nginx/app.conf.tmp && mv nginx/app.conf.tmp nginx/app.conf

#           # Test nginx configuration before reloading
#           docker-compose -f docker-compose.yml -p news-bot-prod exec -T nginx nginx -t

#           # If the test passes, then reload
#           if [ $? -eq 0 ]; then
#             docker-compose -f docker-compose.yml -p news-bot-prod exec -T nginx nginx -s reload
#             echo "Traffic successfully switched to $NEW_DEPLOYMENT"
#             return 0
#           else
#             echo "Nginx configuration test failed. Not switching traffic."
#             return 1
#           fi
#         }
        
#         # Function to cleanup old deployment
#         cleanup_old_deployment() {
#           if [[ -n "$ACTIVE_DEPLOYMENT" ]]; then
#             echo "Cleaning up old deployment: $OLD_DEPLOYMENT"
#             docker-compose -f docker-compose.yml -p news-bot-prod stop $OLD_DEPLOYMENT
#             docker-compose -f docker-compose.yml -p news-bot-prod rm -f $OLD_DEPLOYMENT
#           else
#             echo "No old deployment to clean up."
#           fi
#         }
        
#         # Function to rollback
#         rollback() {
#           echo "Rolling back to previous deployment..."
#           docker-compose -f docker-compose.yml -p news-bot-prod stop $NEW_DEPLOYMENT
#           docker-compose -f docker-compose.yml -p news-bot-prod rm -f $NEW_DEPLOYMENT
#           # Restore the old nginx configuration
#           git checkout -- nginx/app.conf
#           docker-compose -f docker-compose.yml -p news-bot-prod exec -T nginx nginx -s reload
#           echo "Rollback completed."
#         }
        
#         # Main deployment logic
#         echo "Starting new deployment..."
#         if start_services; then
#           echo "Waiting for essential services..."
#           wait_for_services 
#           echo "Performing health check..."
#           if health_check; then
#             echo "New deployment is healthy. Switching traffic..."
#             if switch_traffic; then
#               echo "Waiting for traffic switch to stabilize..."
#               sleep 50
#               echo "Cleaning up old deployment..."
#               cleanup_old_deployment
#               echo "Deployment successful."
#             else
#               echo "Failed to switch traffic. Rolling back..."
#               rollback
#               echo "Deployment failed. Old deployment still active."
#               exit 1
#             fi
#           else
#             echo "Health check failed. Rolling back..."
#             rollback
#             echo "Deployment failed. Old deployment still active."
#             exit 1
#           fi
#         else
#           echo "Failed to start services. Deployment failed."
#           exit 1
#         fi

#     - name: Deployment Status
#       if: always()
#       run: |
#         if [ ${{ job.status }} == 'success' ]; then
#           echo "Deployment to Production completed successfully!"
#         else
#           echo "Deployment to Production failed. Please check the logs for details."
#         fi

#     - name: Debug Information
#       if: failure()
#       run: |
#         echo "Current directory: $(pwd)"
#         echo "Contents of directory:"
#         ls -la
#         echo "Git status:"
#         git status
#         echo "Docker version:"
#         docker --version
#         echo "Docker Compose version:"
#         docker-compose --version
#         echo "Container status:"
#         docker-compose -f docker-compose.yml -p news-bot-prod ps
#         echo "Container logs:"
#         docker-compose -f docker-compose.yml -p news-bot-prod logs --tail=100



name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    env:
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      PGADMIN_DEFAULT_EMAIL: ${{ secrets.PGADMIN_DEFAULT_EMAIL }}
      PGADMIN_DEFAULT_PASSWORD: ${{ secrets.PGADMIN_DEFAULT_PASSWORD }}
      NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
      NGROK_DOMAIN: ${{ vars.NGROK_DOMAIN }}
      NEWS_BOT_OPENAI_API_KEY: ${{ secrets.NEWS_BOT_OPENAI_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      AWS_ACCESS: ${{ secrets.AWS_ACCESS }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
      COINMARKET_API_KEY: ${{ secrets.COINMARKET_API_KEY }}
      FLASK_ENV: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Deploy to Production
      run: |
        echo "Starting deployment to Production environment..."
        # Ensure we're in the correct directory
        cd $GITHUB_WORKSPACE || exit 1
        
        echo "Fetching the latest changes..."
        git fetch origin
        
        echo "Checking out the main branch..."
        git checkout main
        
        echo "Pulling the latest changes from the main branch..."
        PREVIOUS_COMMIT=$(git rev-parse HEAD)
        git pull origin main
        
        # Function to start containers
        start_containers() {
          docker-compose -f docker-compose.yml -p news-bot-prod up -d --build
          return $?
        }
        
        # Function to stop containers
        stop_containers() {
          docker-compose -f docker-compose.yml -p news-bot-prod down
        }
        
        # Function to perform health check
        health_check() {
          for i in {1..5}; do
            if curl -f http://localhost:5001/health; then
              return 0
            fi
            echo "Health check attempt $i failed. Retrying in 30 seconds..."
            sleep 30
          done
          return 1
        }
        
        # Function to rollback
        rollback() {
          echo "Rolling back to previous commit..."
          git reset --hard $PREVIOUS_COMMIT
          stop_containers
          start_containers
          if health_check; then
            echo "Rollback successful"
          else
            echo "Rollback failed. Manual intervention required."
            exit 1
          fi
        }
        
        # Main deployment logic
        echo "Stopping containers..."
        stop_containers
        echo "Starting containers..."
        if start_containers; then 
          echo "Waiting for services to start..."
          sleep 300
          echo "Performing health check..."
          if health_check; then
            echo "Deployment successful. Health check passed."
          else
            echo "Health check failed. Rolling back..."
            rollback
          fi
        else
          echo "Failed to start containers. Rolling back..."
          rollback
        fi

    - name: Deployment Status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "Deployment to Production completed successfully!"
        else
          echo "Deployment to Production failed. Please check the logs for details."
        fi

    - name: Debug Information
      if: failure()
      run: |
        echo "Current directory: $(pwd)"
        echo "Contents of directory:"
        ls -la
        echo "Git status:"
        git status
        echo "Docker version:"
        docker --version
        echo "Docker Compose version:"
        docker-compose --version