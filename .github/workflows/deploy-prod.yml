name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    env:
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      PGADMIN_DEFAULT_EMAIL: ${{ secrets.PGADMIN_DEFAULT_EMAIL }}
      PGADMIN_DEFAULT_PASSWORD: ${{ secrets.PGADMIN_DEFAULT_PASSWORD }}
      NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
      NGROK_DOMAIN: ${{ vars.NGROK_DOMAIN }}
      NEWS_BOT_OPENAI_API_KEY: ${{ secrets.NEWS_BOT_OPENAI_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      AWS_ACCESS: ${{ secrets.AWS_ACCESS }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
      COINMARKET_API_KEY: ${{ secrets.COINMARKET_API_KEY }}
      FLASK_ENV: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Ensure nginx config directory exists
      run: mkdir -p nginx

    - name: Deploy to Production
      run: |
        echo "Starting deployment to Production environment..."
        cd $GITHUB_WORKSPACE || exit 1
        
        echo "Fetching the latest changes..."
        git fetch origin
        
        echo "Checking out the main branch..."
        git checkout main
        
        echo "Pulling the latest changes from the main branch..."
        PREVIOUS_COMMIT=$(git rev-parse HEAD)
        git pull origin main
        
        # Determine current active deployment
        ACTIVE_DEPLOYMENT=$(docker-compose -f docker-compose.yml -p news-bot-prod ps | grep -E "app-(blue|green)" | grep "Up" | awk '{print $1}')
        if [[ $ACTIVE_DEPLOYMENT == *"blue"* ]]; then
          NEW_DEPLOYMENT="app-green"
          OLD_DEPLOYMENT="app-blue"
        else
          NEW_DEPLOYMENT="app-blue"
          OLD_DEPLOYMENT="app-green"
        fi
        
        echo "Current active deployment: $ACTIVE_DEPLOYMENT"
        echo "New deployment: $NEW_DEPLOYMENT"
        
        # Function to start new deployment
        start_new_deployment() {
          docker-compose -f docker-compose.yml -p news-bot-prod up -d --no-deps --build $NEW_DEPLOYMENT
          return $?
        }
        
        # Function to perform health check
        health_check() {
          NEW_PORT=$(docker-compose -f docker-compose.yml -p news-bot-prod port $NEW_DEPLOYMENT 5000 | cut -d: -f2)
          for i in {1..5}; do
            if curl -f http://localhost:$NEW_PORT/health; then
              return 0
            fi
            echo "Health check attempt $i failed. Retrying in 30 seconds..."
            sleep 30
          done
          return 1
        }
        
        # Function to switch traffic
        switch_traffic() {
          sed -i "s/server $OLD_DEPLOYMENT:5000;/server $NEW_DEPLOYMENT:5000;/" nginx/conf.d/app.conf
          sed -i "s/server $NEW_DEPLOYMENT:5000 backup;/server $OLD_DEPLOYMENT:5000 backup;/" nginx/conf.d/app.conf
          docker-compose -f docker-compose.yml -p news-bot-prod exec -T nginx nginx -s reload
        }
        
        # Function to rollback
        rollback() {
          echo "Rolling back to previous deployment..."
          sed -i "s/server $NEW_DEPLOYMENT:5000;/server $OLD_DEPLOYMENT:5000;/" nginx/conf.d/app.conf
          sed -i "s/server $OLD_DEPLOYMENT:5000 backup;/server $NEW_DEPLOYMENT:5000 backup;/" nginx/conf.d/app.conf
          docker-compose -f docker-compose.yml -p news-bot-prod exec -T nginx nginx -s reload
          docker-compose -f docker-compose.yml -p news-bot-prod stop $NEW_DEPLOYMENT
          echo "Rollback completed."
        }
        
        # Main deployment logic
        echo "Starting new deployment..."
        if start_new_deployment; then 
          echo "Waiting for services to start..."
          sleep 60
          echo "Performing health check..."
          if health_check; then
            echo "New deployment is healthy. Switching traffic..."
            switch_traffic
            echo "Waiting for traffic switch to stabilize..."
            sleep 30
            echo "Stopping old deployment..."
            docker-compose -f docker-compose.yml -p news-bot-prod stop $OLD_DEPLOYMENT
            echo "Deployment successful."
          else
            echo "Health check failed. Rolling back..."
            docker-compose -f docker-compose.yml -p news-bot-prod stop $NEW_DEPLOYMENT
            echo "Deployment failed. Old deployment still active."
            exit 1
          fi
        else
          echo "Failed to start new deployment. Old deployment still active."
          exit 1
        fi

    - name: Deployment Status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "Deployment to Production completed successfully!"
        else
          echo "Deployment to Production failed. Please check the logs for details."
        fi

    - name: Debug Information
      if: failure()
      run: |
        echo "Current directory: $(pwd)"
        echo "Contents of directory:"
        ls -la
        echo "Git status:"
        git status
        echo "Docker version:"
        docker --version
        echo "Docker Compose version:"
        docker-compose --version
        echo "Container status:"
        docker-compose -f docker-compose.yml -p news-bot-prod ps
        echo "Container logs:"
        docker-compose -f docker-compose.yml -p news-bot-prod logs --tail=100
