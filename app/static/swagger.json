{
  "swagger": "2.0",
  "info": {
    "title": "News Bots V2 API",
    "description": "API for managing All routes related to News Bots",
    "version": "2.0"
  },
  "tags": [
    {
      "name": "Articles",
      "description": "Operations related to articles"
    }
  ],
  "paths": {
    "/articles": {
      "get": {
        "tags": [
          "Articles"
        ],
        "summary": "Retrieve articles with optional pagination",
        "description": "This endpoint retrieves articles from the database, with optional pagination support.\nArticles are ordered by creation date (most recent first).\nIf pagination parameters are not provided, all articles are returned.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (optional)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of articles per page (optional)",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved articles",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "title": {
                        "type": "string"
                      },
                      "content": {
                        "type": "string"
                      },
                      "summary": {
                        "type": "string"
                      },
                      "date": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "url": {
                        "type": "string"
                      },
                      "image_url": {
                        "type": "string"
                      },
                      "bot_id": {
                        "type": "integer"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                },
                "pagination": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "total_items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No articles found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "array",
                  "items": {}
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid pagination parameters",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Page not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/article/{article_id}": {
      "get": {
        "tags": [
          "Articles"
        ],
        "summary": "Retrieve a specific article by its id",
        "description": "This endpoint retrieves a specific article by its id from either the article or unwantedarticle table. it returns the article details if found in either table. if the article is not found in either table, it returns an error response.",
        "parameters": [
          {
            "name": "article_id",
            "in": "path",
            "description": "The ID of the article to retrieve",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved article",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "title": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                },
                "source": {
                  "type": "string",
                  "enum": [
                    "Article",
                    "UnwantedArticle"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Article not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Articles"
        ],
        "summary": "Delete an article by its id",
        "description": "This endpoint deletes a specific article by its id. if the article is successfully deleted, it returns a success message. if the article is not found or there is a database error, it returns an appropriate error message.",
        "parameters": [
          {
            "name": "article_id",
            "in": "path",
            "description": "The ID of the article to delete",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Article deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Article not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/articles/generate_image": {
      "post": {
        "tags": [
          "News Creator"
        ],
        "summary": "Generate an image using DALL-E 3 model",
        "description": "Generate an image based on the content and bot_id using DALL-E 3 model.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "content",
                  "bot_id"
                ],
                "properties": {
                  "content": {
                    "type": "string"
                  },
                  "bot_id": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Image generated successfully"
          },
          "400": {
            "description": "Missing required fields"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/articles/generate": {
      "post": {
        "tags": [
          "News Creator"
        ],
        "summary": "Generate an article summary using the Perplexity model",
        "description": "Generate a new article summary based on the provided content and category_id.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "content",
                  "category_id"
                ],
                "properties": {
                  "content": {
                    "type": "string"
                  },
                  "category_id": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Article summary generated successfully"
          },
          "400": {
            "description": "Missing required fields"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/articles/recent": {
      "get": {
        "tags": [
          "News Creator"
        ],
        "summary": "Get the last five articles",
        "description": "Retrieve the last five articles with extended details.",
        "responses": {
          "200": {
            "description": "Successfully retrieved the last five articles"
          },
          "404": {
            "description": "No articles found matching the criteria"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/content/extract": {
      "post": {
        "tags": [
          "News Creator"
        ],
        "summary": "Extract content from a link or Google Docs",
        "description": "Extract content from a provided link or Google Docs based on the extract type.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "extract_type",
                  "link"
                ],
                "properties": {
                  "extract_type": {
                    "type": "string",
                    "description": "Type of extraction ('link' or 'google_docs')"
                  },
                  "link": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully extracted content"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/upload_news_file_to_drive": {
      "post": {
        "tags": [
          "News Creator"
        ],
        "summary": "Upload a file to Google Drive",
        "description": "Upload a file to a specified folder in Google Drive.",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "folderName",
                  "file",
                  "fileName"
                ],
                "properties": {
                  "folderName": {
                    "type": "string"
                  },
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "fileName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File uploaded successfully"
          },
          "400": {
            "description": "Bad request. Missing required data"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/bots": {
      "get": {
        "tags": [
          "Bots"
        ],
        "summary": "Get all bots data",
        "description": "\n    this endpoint retrieves data for all bots in the system.\n    \n    the bots are returned as a list, sorted alphabetically by bot name.\n    \n    no parameters are required for this endpoint.\n    ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all bots retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "alias": {
                        "type": "string"
                      },
                      "category_id": {
                        "type": "integer"
                      },
                      "dalle_prompt": {
                        "type": "string"
                      },
                      "prompt": {
                        "type": "string"
                      },
                      "icon": {
                        "type": "string"
                      },
                      "background_color": {
                        "type": "string"
                      },
                      "run_frequency": {
                        "type": "integer"
                      },
                      "is_active": {
                        "type": "boolean"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "summary": "List all scheduled jobs",
        "tags": [
          "Jobs"
        ],
        "responses": {
          "200": {
            "description": "A list of all scheduled jobs",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "next_run_time": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/top-stories": {
      "get": {
        "tags": [
          "Top stories"
        ],
        "summary": "Retrieve top stories with optional pagination",
        "description": "This endpoint retrieves articles marked as top stories, ordered by date (most recent first). it supports optional pagination.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "required": false,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved top stories",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "title": {
                        "type": "string"
                      },
                      "content": {
                        "type": "string"
                      },
                      "date": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "is_top_story": {
                        "type": "boolean"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                },
                "count": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "page": {
                  "type": "integer"
                },
                "pages": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input parameters",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/top-story/{article_id}": {
      "get": {
        "tags": [
          "Top stories"
        ],
        "summary": "Retrieve a single top story article by its id",
        "description": "This endpoint retrieves a specific article that is marked as a top story based on the provided id.",
        "parameters": [
          {
            "name": "article_id",
            "in": "path",
            "description": "ID of the top story article to retrieve",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the top story",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "title": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "is_top_story": {
                      "type": "boolean"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Top story not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Top stories"
        ],
        "summary": "Remove an article from top stories",
        "description": "This endpoint removes an article from top stories by setting its is_top_story flag to false.",
        "parameters": [
          {
            "name": "article_id",
            "in": "path",
            "description": "ID of the article to remove from top stories",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Article successfully removed from top stories",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "updated_id": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Top story not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/article": {
      "get": {
        "tags": [
          "Articles"
        ],
        "summary": "Retrieve articles by bot id or bot name with optional pagination and search functionality",
        "description": "This endpoint retrieves articles by bot id or bot name. it supports optional pagination and search functionality. if no pagination parameters are provided, all matching articles are returned. articles are sorted by creation date in descending order.",
        "parameters": [
          {
            "name": "bot_id",
            "in": "query",
            "description": "ID of the bot (optional if bot_name is provided)",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "bot_name",
            "in": "query",
            "description": "Name of the bot (optional if bot_id is provided)",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number for pagination (optional)",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of articles per page for pagination (optional)",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term to filter articles by content (optional)",
            "required": false,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved articles",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "title": {
                        "type": "string"
                      },
                      "content": {
                        "type": "string"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                },
                "pagination": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "total_items": {
                      "type": "integer"
                    }
                  },
                  "nullable": true
                }
              }
            }
          },
          "204": {
            "description": "No articles found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "array",
                  "items": {}
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Bot not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/articles/unwanted": {
      "get": {
        "tags": [
          "Articles"
        ],
        "summary": "Retrieve unwanted articles with optional filtering, pagination, and search functionality",
        "description": "This endpoint retrieves unwanted articles from the database. it supports optional filtering by bot id, pagination, and search functionality. if no pagination parameters are provided, all matching unwanted articles are returned. articles are sorted by creation date in descending order. the maximum number of items per page is limited to 100.",
        "parameters": [
          {
            "name": "bot_id",
            "in": "query",
            "description": "Bot ID to filter unwanted articles",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number for pagination (optional)",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination (optional, max: 100)",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term to filter unwanted articles by title or content (optional)",
            "required": false,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved unwanted articles",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "bot_id": {
                        "type": "integer"
                      },
                      "title": {
                        "type": "string"
                      },
                      "content": {
                        "type": "string"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                },
                "message": {
                  "type": "string"
                },
                "pagination": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "total_items": {
                      "type": "integer"
                    }
                  },
                  "nullable": true
                }
              }
            }
          },
          "204": {
            "description": "No unwanted articles found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "array",
                  "items": {}
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Page not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Articles"
        ],
        "summary": "Create a new article",
        "description": "Create a new article with comprehensive validation and processing",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "content",
                  "analysis",
                  "used_keywords",
                  "is_article_efficient",
                  "bot_id",
                  "category_id",
                  "image_url"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Title of the article",
                    "minLength": 5,
                    "example": "Breaking News: Tech Innovation Breakthrough"
                  },
                  "content": {
                    "type": "string",
                    "description": "Full content of the article",
                    "minLength": 20,
                    "example": "Detailed article content describing the latest technological innovation..."
                  },
                  "analysis": {
                    "type": "string",
                    "description": "Analysis or summary of the article",
                    "example": "An in-depth look at the recent technological advancements"
                  },
                  "used_keywords": {
                    "type": "array",
                    "description": "Keywords associated with the article",
                    "items": {
                      "type": "string"
                    },
                    "example": ["technology", "innovation", "breakthrough"]
                  },
                  "is_article_efficient": {
                    "type": "string",
                    "description": "Efficiency rating of the article",
                    "example": "High"
                  },
                  "bot_id": {
                    "type": "integer",
                    "description": "Identifier of the bot that created the article",
                    "example": 123
                  },
                  "category_id": {
                    "type": "integer",
                    "description": "Identifier of the article category",
                    "example": 456
                  },
                  "image_url": {
                    "type": "string",
                    "description": "URL of the article's featured image",
                    "format": "uri",
                    "example": "https://example.com/article-image.jpg"
                  },
                  "is_top_story": {
                    "type": "boolean",
                    "description": "Flag to mark the article as a top story",
                    "default": false,
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Article created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "description": "Details of the created article",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 789
                        },
                        "title": {
                          "type": "string",
                          "example": "Breaking News: Tech Innovation Breakthrough"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "'title' is required and cannot be empty",
                        "Content must be at least 20 characters long"
                      ]
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Article already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "An article with this title already exists"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unexpected error occurred during article creation"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bot": {
      "get": {
        "tags": [
          "Bots"
        ],
        "summary": "Get a specific bot by name or id",
        "description": "\n    this endpoint retrieves information for a specific bot, including related keywords, blacklist items, and site data.\n    \n    you must provide either the bot_name or bot_id as a query parameter.\n    \n    the response includes detailed information about the bot, including its associated keywords, blacklist items, and site data.\n    ",
        "parameters": [
          {
            "name": "bot_name",
            "in": "query",
            "description": "The name of the bot to retrieve",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "bot_id",
            "in": "query",
            "description": "The ID of the bot to retrieve",
            "required": false,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Bot information retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "alias": {
                      "type": "string"
                    },
                    "category_id": {
                      "type": "integer"
                    },
                    "dalle_prompt": {
                      "type": "string"
                    },
                    "prompt": {
                      "type": "string"
                    },
                    "icon": {
                      "type": "string"
                    },
                    "background_color": {
                      "type": "string"
                    },
                    "run_frequency": {
                      "type": "integer"
                    },
                    "is_active": {
                      "type": "boolean"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "keywords": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Sorted list of keywords associated with the bot"
                    },
                    "blacklist": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Sorted list of blacklisted items for the bot"
                    },
                    "site": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "url": {
                          "type": "string"
                        },
                        "bot_id": {
                          "type": "integer"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time"
                        }
                      },
                      "description": "Site data associated with the bot, null if no site exists"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Bot not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Bots"
        ],
        "summary": "Create a new bot",
        "description": "\n    This endpoint creates a new bot with specified parameters and optionally connects it to an RSS feed source.\n    \n    Required fields:\n    - 'name': Unique identifier for the bot\n    - 'alias': Display name for the bot\n    - 'category_id': ID of the category this bot belongs to\n    - 'run_frequency': How often the bot should run (in minutes, minimum 20)\n    \n    Optional fields:\n    - 'prompt': The bot's initial conversation prompt\n    - 'dalle_prompt': Used to generate a custom icon\n    - 'background_color': Custom background color for the bot's icon\n    - 'whitelist': Comma-separated list of keywords to monitor\n    - 'blacklist': Comma-separated list of words to filter out\n    - 'url': Google News RSS feed URL for data source, (eg. https://rss.news.google.com/rss/search?q=apple+inc+stock+price&hl=en-US&gl=US)\n    \n    Notes:\n    - Bot names must be unique\n    - URLs must be valid Google News RSS feed URLs\n    - Run frequency cannot be less than 20 minutes\n    - The bot will be created in an inactive state\n    - System automatically sets created_at and updated_at timestamps\n    ",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Bot details",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the bot (required)"
                },
                "alias": {
                  "type": "string",
                  "description": "Unique identifier for the bot (required)"
                },
                "category_id": {
                  "type": "integer",
                  "description": "ID of the category the bot belongs to (required)"
                },
                "prompt": {
                  "type": "string",
                  "description": "Initial conversation prompt for the bot (required)"
                },
                "url": {
                  "type": "string",
                  "description": "Google News RSS feed URL for data source (optional for scheduling)"
                },
                "run_frequency": {
                  "type": "integer",
                  "description": "How often the bot should run, in minutes (optional)"
                },
                "dalle_prompt": {
                  "type": "string",
                  "description": "Prompt for generating a custom icon using DALL-E (optional)"
                },
                "background_color": {
                  "type": "string",
                  "description": "Background color for the bot's icon (optional)"
                },
                "whitelist": {
                  "type": "string",
                  "description": "Comma-separated list of keywords to add to the existing whitelist"
                },
                "blacklist": {
                  "type": "string",
                  "description": "Comma-separated list of words to add to the existing blacklist"
                }
              },
              "required": [
                "name",
                "alias",
                "category_id",
                "prompt"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Bot created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "Unique identifier for the bot",
                        "required": true
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the bot"
                      },
                      "alias": {
                        "type": "string",
                        "description": "Unique alias of the bot"
                      },
                      "category_id": {
                        "type": "integer",
                        "description": "ID of the category the bot belongs to"
                      },
                      "prompt": {
                        "type": "string",
                        "description": "Initial conversation prompt for the bot"
                      },
                      "run_frequency": {
                        "type": "integer",
                        "description": "How often the bot runs, in minutes"
                      },
                      "dalle_prompt": {
                        "type": "string",
                        "description": "Prompt used for generating the bot's icon"
                      },
                      "icon": {
                        "type": "string",
                        "description": "URL of the bot's icon"
                      },
                      "background_color": {
                        "type": "string",
                        "description": "Background color of the bot's icon"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp of when the bot was created"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp of when the bot was last updated"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input - This could occur if required fields are missing or if the alias is not unique",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - This could occur due to database issues or other server-side problems",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/bot/{bot_id}": {
      "put": {
        "tags": [
          "Bots"
        ],
        "summary": "Update an existing bot",
        "description": "\n    this endpoint updates an existing bot identified by its id. it allows for modification of various bot properties and associated data.\n\n    key features and behaviors:\n    1. bot identification:\n       - the bot is identified by the bot_id provided in the url path.\n       - if no bot is found with the given id, a 404 error is returned.\n\n    2. updatable fields:\n       - name: the bot's name\n       - alias: an alternative identifier for the bot\n       - category_id: the id of the category the bot belongs to\n       - dalle_prompt: the dall-e prompt for the bot\n       - prompt: the general prompt for the bot\n       - background_color: hex code string for visual representation\n       - run_frequency: the frequency to run the bot in minutes\n\n    3. icon update:\n       - if the alias is updated, the bot's icon url is automatically regenerated based on the new alias.\n\n    4. site update:\n       - if a url is provided, the associated site entry is updated or created if it doesn't exist.\n       - the site name is extracted from the url.\n\n    5. keywords (whitelist) update:\n       - new keywords are added to the existing set of keywords.\n       - existing keywords are not removed.\n\n    6. blacklist update:\n       - new blacklist entries are added to the existing set of blacklisted items.\n       - existing blacklist entries are not removed.\n\n    7. bot rescheduling:\n       - if the bot is active and certain fields are updated (excluding background_color and alias), the bot is rescheduled.\n\n    note: this endpoint performs multiple database operations. all changes are committed atomically within a single transaction.\n    ",
        "parameters": [
          {
            "name": "bot_id",
            "in": "path",
            "description": "The ID of the bot to update",
            "required": true,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "body",
            "in": "body",
            "description": "Bot update details",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the bot"
                },
                "alias": {
                  "type": "string",
                  "description": "An alias for the bot. This will be used to generate the icon URL."
                },
                "category_id": {
                  "type": "integer",
                  "description": "The ID of the category the bot belongs to"
                },
                "dalle_prompt": {
                  "type": "string",
                  "description": "The DALL-E prompt for the bot"
                },
                "prompt": {
                  "type": "string",
                  "description": "The general prompt for the bot"
                },
                "background_color": {
                  "type": "string",
                  "description": "The background color for the bot (e.g., \"#FFFFFF\")"
                },
                "run_frequency": {
                  "type": "integer",
                  "description": "The frequency to run the bot in minutes"
                },
                "url": {
                  "type": "string",
                  "description": "The URL for the bot's site"
                },
                "whitelist": {
                  "type": "string",
                  "description": "Comma-separated list of keywords to add to the existing whitelist"
                },
                "blacklist": {
                  "type": "string",
                  "description": "Comma-separated list of words to add to the existing blacklist"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bot updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "alias": {
                      "type": "string"
                    },
                    "category_id": {
                      "type": "integer"
                    },
                    "dalle_prompt": {
                      "type": "string"
                    },
                    "prompt": {
                      "type": "string"
                    },
                    "icon": {
                      "type": "string"
                    },
                    "background_color": {
                      "type": "string"
                    },
                    "run_frequency": {
                      "type": "integer"
                    },
                    "is_active": {
                      "type": "boolean"
                    },
                    "status": {
                      "type": "string"
                    },
                    "next_run_time": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "format": "date-time"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid data provided",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Bot not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Bots"
        ],
        "summary": "Delete a bot and all its associated data",
        "description": "This endpoint deletes a bot entry identified by the provided id. due to the cascade\n    configuration, it will also delete all associated sites, keywords, blacklist entries,\n    articles, and unwanted articles.\n    ",
        "parameters": [
          {
            "name": "bot_id",
            "in": "path",
            "description": "The ID of the bot to be deleted",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Bot deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "error": {
                  "type": "string",
                  "nullable": true
                }
              }
            }
          },
          "404": {
            "description": "Bot not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/category": {
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Create a new category for organizing bots",
        "description": "\n    this endpoint allows you to create a new category, which serves as a container for grouping related bots.\n    \n    key points:\n    - the 'name' and 'alias' fields are required. the 'name' is displayed to users, while the 'alias' is used internally.\n    - an icon url is automatically generated based on the provided alias. this icon will be used in the ui to represent the category.\n    - the 'slack_channel' field, if provided, associates the category with a specific slack channel for notifications.\n    - the 'border_color' field allows you to set a custom color (in hex format) for visual distinction in the ui.\n    - new categories are created with 'is_active' set to false by default.\n    - the 'created_at' and 'updated_at' timestamps are automatically set.\n\n    after creation, you can add bots to this category using the bot creation or update endpoints.\n    ",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Category details",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Display name of the category (required)"
                },
                "alias": {
                  "type": "string",
                  "description": "Unique identifier for the category, used for icon generation (required)"
                },
                "slack_channel": {
                  "type": "string",
                  "description": "Slack channel ID for category notifications (optional)"
                },
                "border_color": {
                  "type": "string",
                  "description": "HEX color code for category border in UI (optional, e.g., \"#FF5733\")"
                }
              },
              "required": [
                "name",
                "alias"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Category created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input - This could occur if required fields are missing or if the alias is not unique",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - This could occur due to database issues or other server-side problems",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get a category by id or name",
        "description": "This endpoint retrieves a specific category and its associated bots from the database.",
        "parameters": [
          {
            "name": "category_id",
            "in": "query",
            "description": "The ID of the category",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "category_name",
            "in": "query",
            "description": "The name of the category",
            "required": false,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Category retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (no valid parameters provided)",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/category/{category_id}": {
      "delete": {
        "tags": [
          "Categories"
        ],
        "summary": "Delete a category and its associated bots by id",
        "description": "This endpoint deletes a category and all its associated bots from the database.",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "The ID of the category to be deleted",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "summary": "Update an existing category",
        "description": "\n    this endpoint allows you to update the details of an existing category. it's particularly useful for modifying category properties or correcting information.\n\n    key behaviors:\n    1. partial updates are supported. you only need to include the fields you want to change in the request body.\n    2. if the 'alias' is updated, the category's icon url will be automatically regenerated.\n    3. updating certain fields (like 'slack_channel' or 'run_frequency') will trigger a rescheduling of all active bots in this category.\n    4. the 'updated_at' timestamp is automatically set to the current time upon successful update.\n\n    important notes for frontend implementation:\n    - when updating the 'alias', be aware that this might change the category's icon, which could affect ui elements.\n    - if the update results in bot rescheduling, the response will include information about which bots were rescheduled or if any failed.\n    - the 'border_color' field accepts hex color codes, which can be used to update the category's visual representation in the ui.\n\n    this endpoint is crucial for maintaining accurate and up-to-date category information, which directly impacts bot organization and functionality.\n    ",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "Unique identifier of the category to update",
            "required": true,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated category details",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "New display name for the category"
                },
                "alias": {
                  "type": "string",
                  "description": "New alias for the category (will regenerate icon URL if changed)"
                },
                "slack_channel": {
                  "type": "string",
                  "description": "New Slack channel ID for category notifications"
                },
                "border_color": {
                  "type": "string",
                  "description": "New HEX color code for category border in UI (e.g., \"#FF5733\")"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "category": {
                      "$ref": "#/components/schemas/Category"
                    },
                    "rescheduled_bots": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Names of bots that were rescheduled due to the update"
                    },
                    "failed_reschedules": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Names of bots that failed to reschedule"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Category not found - The specified category_id does not exist",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - This could occur due to database issues or problems with the scheduler",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get all available categories along with their associated bots",
        "description": "This endpoint retrieves all categories and their associated bots from the database.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Categories retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "categories": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No categories found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/category/{category_id}/toggle-activation": {
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Toggle activation status for all bots in a category",
        "description": "\n    this endpoint provides a powerful way to activate or deactivate all bots within a specific category simultaneously. it's particularly useful for bulk operations or when you need to quickly enable or disable a group of related bots.\n\n    key behaviors:\n    1. if the category is currently active (contains active bots):\n       - all active bots will be deactivated.\n       - their scheduled jobs will be removed from the scheduler.\n       - each bot's 'is_active' status will be set to false.\n       - each bot's status will be changed to 'idle'.\n       - the 'next_run_time' for each bot will be cleared.\n\n    2. if the category is currently inactive (contains no active bots):\n       - each bot in the category will be validated for activation.\n       - if a bot passes validation, it will be scheduled and activated.\n       - the bot's 'is_active' status will be set to true.\n       - the bot's status will be set to 'idle' (it will change to 'running' when the scheduler executes it).\n\n    important notes for frontend implementation:\n    - this operation may take some time, especially for categories with many bots.\n    - the response includes detailed information about the operation's results, including counts of activated/deactivated bots and any failures.\n    - you may want to implement a loading indicator while this operation is in progress.\n    - after toggling, you should refresh any ui components that display bot statuses or category information.\n    - be prepared to handle partial success scenarios where some bots may fail to activate or deactivate.\n\n    this endpoint is crucial for managing the overall activity of bot groups and can significantly impact system resource usage and bot operations.\n    ",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "Unique identifier of the category whose bots should be toggled",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Category bots toggled successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "total_bots": {
                      "type": "integer",
                      "description": "Total number of bots in the category"
                    },
                    "activated_count": {
                      "type": "integer",
                      "description": "Number of bots that were activated"
                    },
                    "deactivated_count": {
                      "type": "integer",
                      "description": "Number of bots that were deactivated"
                    },
                    "success_count": {
                      "type": "integer",
                      "description": "Total number of bots successfully processed"
                    },
                    "failure_count": {
                      "type": "integer",
                      "description": "Number of bots that failed to toggle"
                    },
                    "processed_bots": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "Bot ID"
                          },
                          "name": {
                            "type": "string",
                            "description": "Bot name"
                          },
                          "previous_state": {
                            "type": "string",
                            "description": "Bot state before toggling"
                          },
                          "new_state": {
                            "type": "string",
                            "description": "Bot state after toggling"
                          },
                          "status": {
                            "type": "string",
                            "description": "Status of the toggle operation for this bot"
                          },
                          "error": {
                            "type": "string",
                            "description": "Error message if the bot failed to toggle"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Category not found - The specified category_id does not exist",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - This could occur due to database issues, problems with the scheduler, or other server-side errors",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/keywords": {
      "post": {
        "tags": [
          "Keywords"
        ],
        "summary": "Add keywords to multiple bots in bulk",
        "description": "This endpoint adds multiple keywords to multiple bots in a single operation. it checks for existing keywords to avoid duplicates and performs a bulk insert for efficiency.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "JSON object containing keywords and bot IDs",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "keywords": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of keywords to add"
                },
                "bot_ids": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "List of bot IDs to add keywords to"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Keywords added to bots successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "added_count": {
                      "type": "integer"
                    },
                    "affected_bots": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error or database error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Keywords"
        ],
        "summary": "Delete keywords from multiple bots in bulk",
        "description": "This endpoint deletes multiple keywords from multiple bots. it can delete keywords by their ids or by their names. if both keyword_ids and keywords are provided, keyword_ids takes precedence.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "JSON object containing keyword IDs or names and bot IDs",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "keyword_ids": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "List of keyword IDs to delete (optional)"
                },
                "keywords": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of keyword names to delete (optional)"
                },
                "bot_ids": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "List of bot IDs to delete keywords from"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Keywords deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "deleted_count": {
                      "type": "integer"
                    },
                    "affected_bots": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No matching keywords found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error or database error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/keywords/search": {
      "post": {
        "tags": [
          "Keywords"
        ],
        "summary": "Search for related keywords and blacklist words across specified bots",
        "description": "This endpoint searches for keywords and blacklist words across multiple bots based on provided queries. it returns matching entries along with their associated bot names, separated into whitelist (keywords) and blacklist categories.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "JSON object containing search queries and bot IDs",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "queries": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of search queries"
                },
                "bot_ids": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "List of bot IDs to search within"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved relevant words",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "whitelist": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          },
                          "bot_id": {
                            "type": "integer"
                          },
                          "bot_name": {
                            "type": "string"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "blacklist": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          },
                          "bot_id": {
                            "type": "integer"
                          },
                          "bot_name": {
                            "type": "string"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No related words found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/blacklist": {
      "post": {
        "tags": [
          "Blacklist"
        ],
        "summary": "Add entries to the blacklist for multiple bots",
        "description": "This endpoint adds multiple entries to the blacklist for multiple bots in a single operation. it checks for existing entries to avoid duplicates.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "JSON object containing entries and bot IDs",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "entries": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of entries to add to the blacklist"
                },
                "bot_ids": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "List of bot IDs to add entries to"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully added entries to the blacklist",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "added_count": {
                      "type": "integer"
                    },
                    "affected_bots": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error or database error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Blacklist"
        ],
        "summary": "Delete entries from the blacklist for multiple bots",
        "description": "This endpoint deletes multiple entries from the blacklist for multiple bots. it can delete entries by their ids or by their names.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "JSON object containing entry IDs or names and bot IDs",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "entry_ids": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "List of entry IDs to delete (optional)"
                },
                "entries": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of entry names to delete (optional)"
                },
                "bot_ids": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "List of bot IDs to delete entries from"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entries deleted from blacklist successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "deleted_count": {
                      "type": "integer"
                    },
                    "affected_bots": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No matching blacklist entries found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error or database error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/blacklist/search": {
      "post": {
        "tags": [
          "Blacklist"
        ],
        "summary": "Search for blacklist entries across specified bots",
        "description": "This endpoint searches for blacklist entries across multiple bots based on provided queries. it returns matching entries along with their associated bot names.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "JSON object containing search queries and bot IDs",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "queries": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of search queries"
                },
                "bot_ids": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "List of bot IDs to search within"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved relevant blacklist entries",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "blacklist": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          },
                          "bot_id": {
                            "type": "integer"
                          },
                          "bot_name": {
                            "type": "string"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No related entries found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/top-stories/{article_id}": {
      "post": {
        "tags": [
          "Top stories"
        ],
        "summary": "Set an article as a top story",
        "description": "This endpoint sets the is_top_story field of a specific article to true, marking it as a top story.",
        "parameters": [
          {
            "name": "article_id",
            "in": "path",
            "description": "ID of the article to be set as a top story",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Article successfully set as a top story",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "title": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "is_top_story": {
                      "type": "boolean"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Article not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/keywords/trending": {
      "get": {
        "tags": [
          "Keywords"
        ],
        "summary": "Retrieve trending keywords with optional bot and time period filtering",
        "description": "\n    this endpoint retrieves used keywords from articles, with optional filtering by bot_id and time period.\n    it provides a count of keyword usage, allowing identification of trending keywords.\n    \n    keywords are extracted from the usedkeywords table, split if comma-separated, and aggregated to provide accurate usage counts.\n    results are sorted by usage count in descending order, showing the most used (trending) keywords first.\n    time periods:\n    - \"1w\": last 7 days\n    - \"1m\": last 30 days\n    - \"3m\": last 90 days\n    - \"all\": all time (default if not specified)\n\n    if no bot_id is provided, keywords from all bots will be included.\n    ",
        "parameters": [
          {
            "name": "bot_id",
            "in": "query",
            "description": "Bot ID to filter keywords (optional). If not provided, includes keywords from all bots.",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "time_period",
            "in": "query",
            "description": "Time period for filtering: \"1w\" (7 days), \"1m\" (30 days), \"3m\" (90 days), or \"all\" (all time). Default is \"all\".",
            "required": false,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved used keywords",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "used_keywords": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "keyword": {
                            "type": "string"
                          },
                          "count": {
                            "type": "integer"
                          }
                        }
                      }
                    },
                    "total_unique_keywords": {
                      "type": "integer"
                    },
                    "filter_applied": {
                      "type": "object",
                      "properties": {
                        "bot_id": {
                          "type": "integer",
                          "nullable": true
                        },
                        "time_period": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid time period provided",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/keywords/extract": {
      "post": {
        "tags": [
          "Keywords"
        ],
        "summary": "Extract and clean keywords and blacklist from an uploaded excel file",
        "description": "\n    this endpoint processes an uploaded excel file (.xls or .xlsx) to extract and clean keywords and blacklist items.\n\n    file structure requirements:\n    1. the excel file can contain multiple sheets.\n    2. sheets are processed if their names contain 'keyword' or 'blacklist' (case-insensitive).\n    3. each relevant sheet must have a column with a header containing 'keyword' or 'blacklist' respectively.\n    4. the first matching column in each sheet will be used for data extraction.\n\n    extraction and cleaning process:\n    - for sheets with 'keyword' in the name: \n      * extracts data from the first column with 'keyword' in its header.\n    - for sheets with 'blacklist' in the name:\n      * extracts data from the first column with 'blacklist' in its header.\n    - data is extracted from all rows below the header row.\n    - all extracted data is cleaned:\n      * converted to lowercase\n      * special characters (including hyphens, slashes, and parentheses) are removed\n      * multiple spaces are replaced with a single space\n      * leading and trailing spaces are removed\n    - duplicate entries are automatically removed.\n    - empty cells or cells that become empty after cleaning are ignored.\n\n    the endpoint returns comma-separated strings for both keywords and blacklist items.\n    if no data is found for either keywords or blacklist, an empty string is returned for that category.\n    ",
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "Excel file (.xls or .xlsx) to be processed",
            "required": true,
            "type": "file",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Keywords and blacklist extracted and cleaned successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "keywords": {
                      "type": "string",
                      "description": "Comma-separated list of cleaned, extracted keywords"
                    },
                    "blacklist": {
                      "type": "string",
                      "description": "Comma-separated list of cleaned, extracted blacklist items"
                    }
                  }
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/bot/{bot_id}/toggle-activation": {
      "post": {
        "tags": [
          "Bots"
        ],
        "summary": "Toggle activation status of a specific bot",
        "description": "\n    this endpoint toggles the activation status of a bot identified by its id. it performs different actions based on the current activation status of the bot:\n\n    1. if the bot is currently active (is_active = true):\n       - it attempts to remove the bot's scheduled job from the scheduler.\n       - sets the bot's is_active status to false.\n       - changes the bot's status to 'idle'.\n       - clears the bot's next_run_time.\n\n    2. if the bot is currently inactive (is_active = false):\n       - it first validates the bot for activation using the validate_bot_for_activation function.\n       - if there are validation errors, it returns these errors and doesn't activate the bot.\n       - if validation passes, it attempts to schedule the bot using the schedule_bot function.\n       - if scheduling is successful, it sets the bot's is_active status to true and status to 'idle'.\n\n    the endpoint uses a database session to ensure all changes are committed atomically.\n    it also updates related cache endpoints ('get_all_bots' and 'get_bot') upon successful execution.\n\n",
        "parameters": [
          {
            "name": "bot_id",
            "in": "path",
            "description": "The ID of the bot to toggle activation",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Bot activation status toggled successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "bot": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "alias": {
                      "type": "string"
                    },
                    "category_id": {
                      "type": "integer"
                    },
                    "dalle_prompt": {
                      "type": "string"
                    },
                    "prompt": {
                      "type": "string"
                    },
                    "icon": {
                      "type": "string"
                    },
                    "background_color": {
                      "type": "string"
                    },
                    "run_frequency": {
                      "type": "integer"
                    },
                    "is_active": {
                      "type": "boolean"
                    },
                    "status": {
                      "type": "string"
                    },
                    "next_run_time": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "format": "date-time"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Bot activation failed due to validation errors",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                },
                "validation_errors": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bot not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/bot/{bot_id}/logs": {
      "get": {
        "tags": [
          "Bots"
        ],
        "summary": "Get bot logs",
        "description": "\n    this endpoint streams the log file for a specific bot.\n    \n    key points:\n    - returns the raw log file content as plain text\n    - logs include pipeline processing details, errors, and metrics\n    - the log file is read directly from the filesystem\n    - returns 404 if bot or log file not found\n    - returns 500 for server errors\n    ",
        "parameters": [
          {
            "name": "bot_id",
            "in": "path",
            "description": "ID of the bot to get logs for",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Log file content retrieved successfully",
            "schema": {
              "type": "string",
              "description": "Raw log file content"
            }
          },
          "404": {
            "description": "Bot or log file not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string",
                  "description": "Error message indicating whether bot or log file was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred while retrieving logs",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string",
                  "description": "Error message describing what went wrong"
                }
              }
            }
          }
        }
      }
    },
    "/bot/{bot_id}/metrics": {
      "get": {
        "tags": [
          "Bots"
        ],
        "summary": "Get bot metrics with pagination and filtering",
        "description": "\n    retrieves metrics for a specific bot with pagination and date filtering options.\n    \n    the endpoint returns:\n    - list of individual metric records\n    - aggregated statistics across the returned metrics\n    - pagination metadata\n    \n    metrics include:\n    - runtime statistics\n    - resource usage (cpu, memory)\n    - article processing counts\n    - error and filtering statistics\n    ",
        "parameters": [
          {
            "name": "bot_id",
            "in": "path",
            "description": "ID of the bot",
            "required": true,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number (starts at 1)",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Filter metrics after this date (ISO format: YYYY-MM-DDTHH:MM:SS)",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "Filter metrics before this date (ISO format: YYYY-MM-DDTHH:MM:SS)",
            "required": false,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Metrics retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "metrics": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "bot_id": {
                            "type": "integer"
                          },
                          "start_time": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "end_time": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "total_runtime": {
                            "type": "number"
                          },
                          "total_articles_found": {
                            "type": "integer"
                          },
                          "articles_processed": {
                            "type": "integer"
                          },
                          "articles_saved": {
                            "type": "integer"
                          },
                          "cpu_percent": {
                            "type": "number"
                          },
                          "memory_percent": {
                            "type": "number"
                          },
                          "total_errors": {
                            "type": "integer"
                          },
                          "error_reasons": {
                            "type": "object"
                          },
                          "total_filtered": {
                            "type": "integer"
                          },
                          "filter_reasons": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "aggregated_stats": {
                      "type": "object",
                      "properties": {
                        "total_runtime": {
                          "type": "number"
                        },
                        "avg_cpu_percent": {
                          "type": "number"
                        },
                        "avg_memory_percent": {
                          "type": "number"
                        },
                        "total_articles_found": {
                          "type": "integer"
                        },
                        "total_articles_processed": {
                          "type": "integer"
                        },
                        "total_articles_saved": {
                          "type": "integer"
                        },
                        "total_errors": {
                          "type": "integer"
                        },
                        "total_filtered": {
                          "type": "integer"
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "total_items": {
                          "type": "integer"
                        },
                        "total_pages": {
                          "type": "integer"
                        },
                        "current_page": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        },
                        "has_next": {
                          "type": "boolean"
                        },
                        "has_prev": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters provided",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string",
                  "description": "Error message describing the invalid parameters"
                }
              }
            }
          },
          "404": {
            "description": "Bot not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string",
                  "description": "Error message indicating bot was not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string",
                  "description": "Error message describing what went wrong"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "TopStoriesResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Article"
            }
          },
          "count": {
            "type": "integer"
          }
        }
      },
      "SingleTopStoryResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/Article"
          }
        }
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "Article": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "analysis": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "used_keywords": {
            "type": "string"
          },
          "is_article_efficent": {
            "type": "string"
          },
          "is_top_story": {
            "type": "boolean"
          },
          "bot_id": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    }
  }
}