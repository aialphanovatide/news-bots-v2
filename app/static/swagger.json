{
  "swagger": "2.0",
  "info": {
    "title": "News Bots V2 API",
    "description": "API for managing All routes related to News Bots",
    "version": "2.0"
  },
  "tags": [
    {
      "name": "Articles",
      "description": "Operations related to articles"
    }
  ],
  "paths": {
    "/articles": {
      "get": {
        "tags": [
          "Articles"
        ],
        "summary": "Retrieve articles with optional pagination",
        "description": "This endpoint retrieves articles from the database, with optional pagination support.\nArticles are ordered by creation date (most recent first).\nIf pagination parameters are not provided, all articles are returned.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (optional)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of articles per page (optional)",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved articles",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "title": {
                        "type": "string"
                      },
                      "content": {
                        "type": "string"
                      },
                      "summary": {
                        "type": "string"
                      },
                      "date": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "url": {
                        "type": "string"
                      },
                      "image_url": {
                        "type": "string"
                      },
                      "bot_id": {
                        "type": "integer"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                },
                "pagination": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "total_items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No articles found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "array",
                  "items": {}
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid pagination parameters",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Page not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/article/{article_id}": {
      "get": {
        "tags": [
          "Articles"
        ],
        "summary": "Retrieve a specific article by its id",
        "description": "This endpoint retrieves a specific article by its id from either the article or unwantedarticle table. it returns the article details if found in either table. if the article is not found in either table, it returns an error response.",
        "parameters": [
          {
            "name": "article_id",
            "in": "path",
            "description": "The ID of the article to retrieve",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved article",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "title": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                },
                "source": {
                  "type": "string",
                  "enum": [
                    "Article",
                    "UnwantedArticle"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Article not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Articles"
        ],
        "summary": "Delete an article by its id",
        "description": "This endpoint deletes a specific article by its id. if the article is successfully deleted, it returns a success message. if the article is not found or there is a database error, it returns an appropriate error message.",
        "parameters": [
          {
            "name": "article_id",
            "in": "path",
            "description": "The ID of the article to delete",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Article deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Article not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/articles/create": {
      "post": {
        "tags": [
          "News Creator"
        ],
        "summary": "Create a new article",
        "description": "Create a new article with the provided data.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "content",
                  "analysis",
                  "used_keywords",
                  "is_article_efficient",
                  "bot_id",
                  "category_id",
                  "image_url"
                ],
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "analysis": {
                    "type": "string"
                  },
                  "used_keywords": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "is_article_efficient": {
                    "type": "string"
                  },
                  "bot_id": {
                    "type": "integer"
                  },
                  "category_id": {
                    "type": "integer"
                  },
                  "image_url": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Article created successfully"
          },
          "400": {
            "description": "Bad request. Missing required fields"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/articles/generate_image": {
      "post": {
        "tags": [
          "News Creator"
        ],
        "summary": "Generate an image using DALL-E 3 model",
        "description": "Generate an image based on the content and bot_id using DALL-E 3 model.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "content",
                  "bot_id"
                ],
                "properties": {
                  "content": {
                    "type": "string"
                  },
                  "bot_id": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Image generated successfully"
          },
          "400": {
            "description": "Missing required fields"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/articles/generate": {
      "post": {
        "tags": [
          "News Creator"
        ],
        "summary": "Generate an article summary using the Perplexity model",
        "description": "Generate a new article summary based on the provided content and category_id.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "content",
                  "category_id"
                ],
                "properties": {
                  "content": {
                    "type": "string"
                  },
                  "category_id": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Article summary generated successfully"
          },
          "400": {
            "description": "Missing required fields"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/articles/recent": {
      "get": {
        "tags": [
          "News Creator"
        ],
        "summary": "Get the last five articles",
        "description": "Retrieve the last five articles with extended details.",
        "responses": {
          "200": {
            "description": "Successfully retrieved the last five articles"
          },
          "404": {
            "description": "No articles found matching the criteria"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/content/extract": {
      "post": {
        "tags": [
          "News Creator"
        ],
        "summary": "Extract content from a link or Google Docs",
        "description": "Extract content from a provided link or Google Docs based on the extract type.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "extract_type",
                  "link"
                ],
                "properties": {
                  "extract_type": {
                    "type": "string",
                    "description": "Type of extraction ('link' or 'google_docs')"
                  },
                  "link": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully extracted content"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/upload_news_file_to_drive": {
      "post": {
        "tags": [
          "News Creator"
        ],
        "summary": "Upload a file to Google Drive",
        "description": "Upload a file to a specified folder in Google Drive.",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "folderName",
                  "file",
                  "fileName"
                ],
                "properties": {
                  "folderName": {
                    "type": "string"
                  },
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "fileName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File uploaded successfully"
          },
          "400": {
            "description": "Bad request. Missing required data"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/bots": {
      "get": {
        "tags": [
          "Bots"
        ],
        "summary": "Get all bots data",
        "description": "This endpoint retrieves data for all bots in the system. the bots are sorted alphabetically by their names.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all bots retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "summary": "List all scheduled jobs",
        "tags": [
          "Jobs"
        ],
        "responses": {
          "200": {
            "description": "A list of all scheduled jobs",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "next_run_time": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/top-stories": {
      "get": {
        "tags": [
          "Top stories"
        ],
        "summary": "Retrieve top stories with optional pagination",
        "description": "This endpoint retrieves articles marked as top stories, ordered by date (most recent first). it supports optional pagination.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination",
            "required": false,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved top stories",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "title": {
                        "type": "string"
                      },
                      "content": {
                        "type": "string"
                      },
                      "date": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "is_top_story": {
                        "type": "boolean"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                },
                "count": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "page": {
                  "type": "integer"
                },
                "pages": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input parameters",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/top-story/{article_id}": {
      "get": {
        "tags": [
          "Top stories"
        ],
        "summary": "Retrieve a single top story article by its id",
        "description": "This endpoint retrieves a specific article that is marked as a top story based on the provided id.",
        "parameters": [
          {
            "name": "article_id",
            "in": "path",
            "description": "ID of the top story article to retrieve",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the top story",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "title": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "is_top_story": {
                      "type": "boolean"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Top story not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Top stories"
        ],
        "summary": "Remove an article from top stories",
        "description": "This endpoint removes an article from top stories by setting its is_top_story flag to false.",
        "parameters": [
          {
            "name": "article_id",
            "in": "path",
            "description": "ID of the article to remove from top stories",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Article successfully removed from top stories",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "updated_id": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Top story not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/article": {
      "get": {
        "tags": [
          "Articles"
        ],
        "summary": "Retrieve articles by bot id or bot name with optional pagination and search functionality",
        "description": "This endpoint retrieves articles by bot id or bot name. it supports optional pagination and search functionality. if no pagination parameters are provided, all matching articles are returned. articles are sorted by creation date in descending order.",
        "parameters": [
          {
            "name": "bot_id",
            "in": "query",
            "description": "ID of the bot (optional if bot_name is provided)",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "bot_name",
            "in": "query",
            "description": "Name of the bot (optional if bot_id is provided)",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number for pagination (optional)",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of articles per page for pagination (optional)",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term to filter articles by content (optional)",
            "required": false,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved articles",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "title": {
                        "type": "string"
                      },
                      "content": {
                        "type": "string"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                },
                "pagination": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "total_items": {
                      "type": "integer"
                    }
                  },
                  "nullable": true
                }
              }
            }
          },
          "204": {
            "description": "No articles found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "array",
                  "items": {}
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Bot not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/articles/unwanted": {
      "get": {
        "tags": [
          "Articles"
        ],
        "summary": "Retrieve unwanted articles with optional filtering, pagination, and search functionality",
        "description": "This endpoint retrieves unwanted articles from the database. it supports optional filtering by bot id, pagination, and search functionality. if no pagination parameters are provided, all matching unwanted articles are returned. articles are sorted by creation date in descending order. the maximum number of items per page is limited to 100.",
        "parameters": [
          {
            "name": "bot_id",
            "in": "query",
            "description": "Bot ID to filter unwanted articles",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number for pagination (optional)",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page for pagination (optional, max: 100)",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term to filter unwanted articles by title or content (optional)",
            "required": false,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved unwanted articles",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "bot_id": {
                        "type": "integer"
                      },
                      "title": {
                        "type": "string"
                      },
                      "content": {
                        "type": "string"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                },
                "message": {
                  "type": "string"
                },
                "pagination": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "total_items": {
                      "type": "integer"
                    }
                  },
                  "nullable": true
                }
              }
            }
          },
          "204": {
            "description": "No unwanted articles found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "array",
                  "items": {}
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Page not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/bot": {
      "get": {
        "tags": [
          "Bots"
        ],
        "summary": "Get a specific bot by name or id, including related keywords, blacklist items, and site data",
        "description": "This endpoint retrieves detailed information about a specific bot, including its related keywords, blacklist items, and associated site data. the bot can be identified either by its name or id.",
        "parameters": [
          {
            "name": "bot_name",
            "in": "query",
            "description": "Name of the bot to retrieve",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "bot_id",
            "in": "query",
            "description": "ID of the bot to retrieve",
            "required": false,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Bot information retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "keywords": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "blacklist": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "site": {
                      "type": "object",
                      "nullable": true,
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "bot_id": {
                          "type": "integer"
                        },
                        "url": {
                          "type": "string"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Bot not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Bots"
        ],
        "summary": "Create a new bot",
        "description": "\n    this endpoint creates a new bot with associated site, keywords (whitelist), and blacklist.\n    it performs various validations and sets up the bot with the provided information.\n    the bot's icon is automatically generated based on the alias.\n    if a url is provided, a corresponding site is created for the bot.\n    ",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Bot creation details",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "required": [
                "name",
                "alias",
                "category_id"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the bot"
                },
                "alias": {
                  "type": "string",
                  "description": "An alias for the bot"
                },
                "category_id": {
                  "type": "integer",
                  "description": "The ID of the category the bot belongs to"
                },
                "dalle_prompt": {
                  "type": "string",
                  "description": "The DALL-E prompt for the bot"
                },
                "background_color": {
                  "type": "string",
                  "description": "The background color for the bot"
                },
                "run_frequency": {
                  "type": "integer",
                  "description": "The frequency to run the bot in minutes"
                },
                "url": {
                  "type": "string",
                  "description": "The URL for the bot's site"
                },
                "whitelist": {
                  "type": "string",
                  "description": "Comma-separated list of keywords"
                },
                "blacklist": {
                  "type": "string",
                  "description": "Comma-separated list of blacklisted words"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Bot created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "bot": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "alias": {
                      "type": "string"
                    },
                    "category_id": {
                      "type": "integer"
                    },
                    "dalle_prompt": {
                      "type": "string"
                    },
                    "icon": {
                      "type": "string"
                    },
                    "background_color": {
                      "type": "string"
                    },
                    "run_frequency": {
                      "type": "integer"
                    },
                    "is_active": {
                      "type": "boolean"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/bot/{bot_id}": {
      "put": {
        "tags": [
          "Bots"
        ],
        "summary": "Update an existing bot and reschedule if necessary",
        "description": "\n    this endpoint updates a bot entry with the provided details, saves the changes to the database,\n    and reschedules the bot if it's active and any field other than background_color or alias has changed.\n    important notes:\n    - all fields except background_color and alias will trigger a bot reschedule if changed.\n    - whitelist and blacklist must be provided as comma-separated values for multiple entries.\n    - if a url is provided, the associated site will be updated or created.\n    - updating the alias will also update the bot's icon.\n    ",
        "parameters": [
          {
            "name": "bot_id",
            "in": "path",
            "description": "The ID of the bot to be updated",
            "required": true,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "body",
            "in": "body",
            "description": "Bot update details",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the bot"
                },
                "alias": {
                  "type": "string",
                  "description": "An alternative identifier for the bot"
                },
                "category_id": {
                  "type": "integer",
                  "description": "The ID of the category the bot belongs to"
                },
                "dalle_prompt": {
                  "type": "string",
                  "description": "The DALL-E prompt for the bot"
                },
                "background_color": {
                  "type": "string",
                  "description": "HEX code string for visual representation"
                },
                "run_frequency": {
                  "type": "integer",
                  "description": "The frequency to run the bot in minutes"
                },
                "url": {
                  "type": "string",
                  "description": "The URL for the bot's site"
                },
                "whitelist": {
                  "type": "string",
                  "description": "Comma-separated list of keywords"
                },
                "blacklist": {
                  "type": "string",
                  "description": "Comma-separated list of blacklisted words"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bot updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "alias": {
                      "type": "string"
                    },
                    "category_id": {
                      "type": "integer"
                    },
                    "dalle_prompt": {
                      "type": "string"
                    },
                    "icon": {
                      "type": "string"
                    },
                    "background_color": {
                      "type": "string"
                    },
                    "run_frequency": {
                      "type": "integer"
                    },
                    "is_active": {
                      "type": "boolean"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Bot not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Bots"
        ],
        "summary": "Delete a bot and all its associated data",
        "description": "This endpoint deletes a bot entry identified by the provided id. due to the cascade\n    configuration, it will also delete all associated sites, keywords, blacklist entries,\n    articles, and unwanted articles.\n    ",
        "parameters": [
          {
            "name": "bot_id",
            "in": "path",
            "description": "The ID of the bot to be deleted",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Bot deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "error": {
                  "type": "string",
                  "nullable": true
                }
              }
            }
          },
          "404": {
            "description": "Bot not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/category": {
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Create a new category on the news bot server",
        "description": "This endpoint creates a new category with the provided details and saves it to the database.",
        "parameters": [
          {
            "name": "name",
            "in": "body",
            "description": "The name of the category",
            "required": true,
            "type": "string",
            "schema": {}
          },
          {
            "name": "alias",
            "in": "body",
            "description": "The alias of the category",
            "required": true,
            "type": "string",
            "schema": {}
          },
          {
            "name": "prompt",
            "in": "body",
            "description": "The prompt for the category",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "slack_channel",
            "in": "body",
            "description": "The Slack channel associated with the category",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "border_color",
            "in": "body",
            "description": "The HEX code for the border color",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "icon",
            "in": "body",
            "description": "The filename of the SVG icon",
            "required": false,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "201": {
            "description": "Category created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid data)",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get a category by id or name",
        "description": "This endpoint retrieves a specific category and its associated bots from the database.",
        "parameters": [
          {
            "name": "category_id",
            "in": "query",
            "description": "The ID of the category",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "category_name",
            "in": "query",
            "description": "The name of the category",
            "required": false,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Category retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (no valid parameters provided)",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/category/{category_id}": {
      "delete": {
        "tags": [
          "Categories"
        ],
        "summary": "Delete a category and its associated bots by id",
        "description": "This endpoint deletes a category and all its associated bots from the database.",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "The ID of the category to be deleted",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "summary": "Update an existing category in the news bot server",
        "description": "This endpoint updates a category entry with the provided details and saves the changes to the database.",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "The ID of the category to be updated",
            "required": true,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "name",
            "in": "body",
            "description": "The name of the category",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "alias",
            "in": "body",
            "description": "The alias of the category",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "prompt",
            "in": "body",
            "description": "The prompt for the category",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "slack_channel",
            "in": "body",
            "description": "The Slack channel associated with the category",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "border_color",
            "in": "body",
            "description": "The HEX code for the border color",
            "required": false,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid data)",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get all available categories along with their associated bots",
        "description": "This endpoint retrieves all categories and their associated bots from the database.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Categories retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "categories": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No categories found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/category/{category_id}/toggle-activation": {
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Toggle activation for all bots within a specific category",
        "description": "This endpoint toggles the activation status of all bots associated with the specified category.",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "The ID of the category",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Category activation toggled successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/keywords": {
      "post": {
        "tags": [
          "Keywords"
        ],
        "summary": "Add keywords to multiple bots in bulk",
        "description": "This endpoint adds multiple keywords to multiple bots in a single operation. it checks for existing keywords to avoid duplicates and performs a bulk insert for efficiency.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "JSON object containing keywords and bot IDs",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "keywords": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of keywords to add"
                },
                "bot_ids": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "List of bot IDs to add keywords to"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Keywords added to bots successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "added_count": {
                      "type": "integer"
                    },
                    "affected_bots": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error or database error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Keywords"
        ],
        "summary": "Delete keywords from multiple bots in bulk",
        "description": "This endpoint deletes multiple keywords from multiple bots. it can delete keywords by their ids or by their names. if both keyword_ids and keywords are provided, keyword_ids takes precedence.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "JSON object containing keyword IDs or names and bot IDs",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "keyword_ids": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "List of keyword IDs to delete (optional)"
                },
                "keywords": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of keyword names to delete (optional)"
                },
                "bot_ids": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "List of bot IDs to delete keywords from"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Keywords deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "deleted_count": {
                      "type": "integer"
                    },
                    "affected_bots": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No matching keywords found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error or database error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/keywords/search": {
      "post": {
        "tags": [
          "Keywords"
        ],
        "summary": "Search for related keywords and blacklist words across specified bots",
        "description": "This endpoint searches for keywords and blacklist words across multiple bots based on provided queries. it returns matching entries along with their associated bot names, separated into whitelist (keywords) and blacklist categories.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "JSON object containing search queries and bot IDs",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "queries": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of search queries"
                },
                "bot_ids": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "List of bot IDs to search within"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved relevant words",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "whitelist": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          },
                          "bot_id": {
                            "type": "integer"
                          },
                          "bot_name": {
                            "type": "string"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "blacklist": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          },
                          "bot_id": {
                            "type": "integer"
                          },
                          "bot_name": {
                            "type": "string"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No related words found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/blacklist": {
      "post": {
        "tags": [
          "Blacklist"
        ],
        "summary": "Add entries to the blacklist for multiple bots",
        "description": "This endpoint adds multiple entries to the blacklist for multiple bots in a single operation. it checks for existing entries to avoid duplicates.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "JSON object containing entries and bot IDs",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "entries": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of entries to add to the blacklist"
                },
                "bot_ids": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "List of bot IDs to add entries to"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully added entries to the blacklist",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "added_count": {
                      "type": "integer"
                    },
                    "affected_bots": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error or database error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Blacklist"
        ],
        "summary": "Delete entries from the blacklist for multiple bots",
        "description": "This endpoint deletes multiple entries from the blacklist for multiple bots. it can delete entries by their ids or by their names.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "JSON object containing entry IDs or names and bot IDs",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "entry_ids": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "List of entry IDs to delete (optional)"
                },
                "entries": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of entry names to delete (optional)"
                },
                "bot_ids": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "List of bot IDs to delete entries from"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entries deleted from blacklist successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "deleted_count": {
                      "type": "integer"
                    },
                    "affected_bots": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No matching blacklist entries found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error or database error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/blacklist/search": {
      "post": {
        "tags": [
          "Blacklist"
        ],
        "summary": "Search for blacklist entries across specified bots",
        "description": "This endpoint searches for blacklist entries across multiple bots based on provided queries. it returns matching entries along with their associated bot names.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "JSON object containing search queries and bot IDs",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "queries": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of search queries"
                },
                "bot_ids": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "List of bot IDs to search within"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved relevant blacklist entries",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "blacklist": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          },
                          "bot_id": {
                            "type": "integer"
                          },
                          "bot_name": {
                            "type": "string"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No related entries found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/top-stories/{article_id}": {
      "post": {
        "tags": [
          "Top stories"
        ],
        "summary": "Set an article as a top story",
        "description": "This endpoint sets the is_top_story field of a specific article to true, marking it as a top story.",
        "parameters": [
          {
            "name": "article_id",
            "in": "path",
            "description": "ID of the article to be set as a top story",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Article successfully set as a top story",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "title": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "is_top_story": {
                      "type": "boolean"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Article not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "TopStoriesResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Article"
            }
          },
          "count": {
            "type": "integer"
          }
        }
      },
      "SingleTopStoryResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/Article"
          }
        }
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "Article": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "analysis": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "used_keywords": {
            "type": "string"
          },
          "is_article_efficent": {
            "type": "string"
          },
          "is_top_story": {
            "type": "boolean"
          },
          "bot_id": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    }
  }
}